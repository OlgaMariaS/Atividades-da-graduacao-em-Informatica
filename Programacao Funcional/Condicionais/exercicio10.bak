#lang racket
(require examples)
 
;Faça uma função que receba 3 medidas e verifique se essas medidas podem formar um triangulo.
;Caso possam formar, verifique qual o tipo de triangulo (equilátero, isóceles ou escaleno).
;-Só é possível formar triangulo quando a soma de dois lados é menor que a do lado restante
;-Um triângulo é equilatero se ele tem todos lados iguais
;-Um triângulo é isóceles se tem dois lados iguais
;-Um triângulo é escaleno quando todos seus lados são diferente

;Tipo de dados
;medidas  --> é ou não triangulo e qual tipo
;numero reais positivos --> booleano e string

(define (eh_triangulo? l1 l2 l3)
  (cond
    [(> (+ l1 l2) l3) #t]
    [(> (+ l2 l3) l1) #t]
    [(> (+ l1 l3) l2) #t]
    [else #f]))

(define (tipo_triangulo l1 l2 l3)
  (if(equal? (eh_triangulo? l1 l2 l3) #t)
    (cond
        [(and (equal? l1 l2) (equal? l2 l3)) "Equilatero"]
        [(or (equal? l1 l2) (equal? l1 l3) (equal? l3 l2)) "Isosceles"]
        [else"Escaleno"])
    "Não é triangulo"))

(examples
  (check-equal? (tipo_triangulo 3 3 4) "Isosceles")
  (check-equal? (tipo_triangulo 1 1 1) "Equilatero")
  (check-equal? (tipo_triangulo 3 2 6) "Escaleno")
  (check-equal? (tipo_triangulo 0 0 0) "Não é triangulo")
)